// AUTOGENERATED CODE

import axios from 'axios';
import proto from "./proto"

const inout = {{#if opt.protobufNs }}proto.{{ opt.protobufNs }}{{else}}proto{{/if}};

{{#unless opt.excludeCommons }}
const configuration = {
   url: "/ax-rpc/v1/",
   correlationId: 0,
   debug: false
};
{{/unless}}

export class AxRPCError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}

{{#each services as | service |}}

export class {{service.name}} {

    constructor(params) {
        this.params = {...configuration, ...params};
    }

    getSession() {
        if (this.params.session)
        if (typeof this.params.session === "function") {
            return this.params.session();
        } else { return this.params.session; }
        return "";
    }

{{#each service.methods as | method |}}
    /// {{ method.description }}{{#ifUnless service.description "Common Service" }} ({{ service.description }}){{/ifUnless}}
    {{ method.name }}({{#unless method.emptyRequest }}request{{/unless}}{{#if method.trxRequired }}, trx{{/if}}) {
        const ro = new inout.{{ service.requestObject }}();
        //TODO: Here body
        {{#if method.loginRequired }}{{#if service.sessionFieldName }}ro.{{ service.sessionFieldName }} = this.getSession();{{/if}}{{/if}}
        {{#if service.correlationIdFieldName}}ro.{{ service.correlationIdFieldName }} = this.params.correlationId++;{{/if}}
        {{#if method.trxRequired}}{{#if service.trxFieldName }}ro.{{ service.trxFieldName }} = trx;{{/if}}{{/if}}
        ro.{{ uncapitalize method.requestName }} = {{#if method.emptyRequest }}{};{{ else }}request;{{/if}}
        const bytes = inout.Request.encode(ro).finish();
        if (this.params.debug)  console.log("REQUEST to:[{{ ../../opt.entryPointPath }}] {{method}}(", ro.{{ uncapitalize method.requestName }} ,")");

        return axios
            .post(this.params.url{{#if ../../opt.entryPoint }}+"{{../../opt.entryPoint}}"{{/if}}, new Uint8Array(bytes),{ headers: { 'Content-Type': 'application/octet-stream'}, responseType: "arraybuffer"})
            .then(response => {
                if (this.params.debug)  console.log("CODE:", response.status, "DATA:", response.data);
                if (response.status === 200) {
                    const po = inout.Response.decode(new Uint8Array(response.data));
                    if (this.params.debug) console.log("RESPONSE:", po);
                    if (po.errorCode) {
                        if (po.errorCode === 401 && this.params.store) this.params.store.dispatch({type:"CLEAR_SESSION"});
                        throw new AxRPCError(po.errorText, po.errorCode);
                    }
                    return po.{{ uncapitalize method.responseName }};
                } else {
                    throw new AxRPCError("Http Error", response.status);
                }
            }, error => { throw new AxRPCError("Network Error", 1)});
        }
    {{/each}}
}
{{/each}}


